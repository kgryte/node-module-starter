#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var pkginfo = require( 'pkginfo' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var opts = require( './opts.json' );
var starter = require( './../lib' );


// VARIABLES //

var args;
var dest;
var pkg;


// INIT //

process.stdout.on( 'error', process.exit );


// PACKAGE INFO //

pkg = pkginfo.read( require.main );
process.title = pkg.package.name;


// PACKAGE UPDATES //

notifier( { 'pkg': pkg.package } ).notify();


// ARGUMENTS //

args = parseArgs( process.argv.slice( 2 ), opts );


// HELP //

function onClose() {
	process.exit( 0 );
}

if ( args.help ) {
	fs.createReadStream( path.join( __dirname, 'usage.txt' ) )
		.pipe( process.stdout )
		.on( 'close', onClose );
    return;
}


// VERSION //

if ( args.version ) {
	console.log( pkg.package.version );
	return;
}


// OPTIONS //

opts = {};

if ( args.name ) {
	opts.name = args.name;
}
if ( args.description ) {
	opts.desc = args.description;
}
if ( args.author ) {
	opts.author = args.author;
}
if ( args.email ) {
	opts.email = args.email;
}
if ( args.keywords ) {
	opts.keywords = args.keywords.split( ',' );
}
if ( args.cmd ) {
	opts.cmd = args.cmd;
}
if ( args.repo ) {
	opts.repo = args.repo;
}
if ( args.license ) {
	opts.license = args.license;
}
if ( args.holder ) {
	opts.holder = args.holder;
}
if ( args.hasOwnProperty( 'no-browser' ) ) {
	opts.browser = false;
}
if ( args.hasOwnProperty( 'no-open' ) ) {
	opts.open = false;
}
if ( args.hasOwnProperty( 'no-git' ) ) {
	opts.git = false;
}
if ( args.hasOwnProperty( 'no-remote' ) ) {
	opts.remote = false;
}
if ( args.hasOwnProperty( 'no-star' ) ) {
	opts.star = false;
}
if ( args.hasOwnProperty( 'no-ci' ) ) {
	opts.ci = false;
}
if ( args.hasOwnProperty( 'silent' ) ) {
	opts.silent = true;
}


// STARTER //

if ( args._.length ) {
	dest = args._[ 0 ];
} else {
	dest = process.cwd();
}
starter( dest, opts, done );

/**
* FUNCTION: done( [error] )
*	Callback invoked after completing tasks.
*
* @private
* @param {Error} [error] - error
* @returns {Void}
*/
function done( error ) {
	if ( error ) {
		throw error;
	}
}


